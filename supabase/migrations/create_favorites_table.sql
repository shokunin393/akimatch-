-- ---------------------------------------------------------------------------
-- Create favorites table to store user-post favorite relationships
-- ---------------------------------------------------------------------------

create table if not exists public.favorites (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    post_id bigint references public.posts not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    constraint favorites_user_id_post_id_key unique (user_id, post_id)
);

-- ---------------------------------------------------------------------------
-- Enable Row Level Security
-- ---------------------------------------------------------------------------

alter table public.favorites enable row level security;

-- ---------------------------------------------------------------------------
-- Policies
-- ---------------------------------------------------------------------------

create policy "Users can view their own favorites" on public.favorites
    for select using (auth.uid() = user_id);

create policy "Users can insert their own favorites" on public.favorites
    for insert with check (auth.uid() = user_id);

create policy "Users can delete their own favorites" on public.favorites
    for delete using (auth.uid() = user_id);

-- ---------------------------------------------------------------------------
-- Indexes
-- ---------------------------------------------------------------------------

create index if not exists favorites_user_id_idx on public.favorites(user_id);
create index if not exists favorites_post_id_idx on public.favorites(post_id);

-- ---------------------------------------------------------------------------
-- Trigger function to update updated_at timestamp before update
-- ---------------------------------------------------------------------------

create or replace function public.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

create trigger handle_favorites_updated_at
    before update on public.favorites
    for each row execute function public.handle_updated_at();
