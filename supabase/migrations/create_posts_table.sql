-- ---------------------------------------------------------------------------
-- Create posts table for storing availability data
-- ---------------------------------------------------------------------------

create table if not exists posts (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  company_name text not null,
  contact_person text not null,
  phone text not null,
  email text not null,
  description text,
  areas text[] not null,
  work_types text[] not null,
  start_date timestamp with time zone not null,
  end_date timestamp with time zone not null,
  budget_range text not null,
  urgency text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- ---------------------------------------------------------------------------
-- Enable Row Level Security
-- ---------------------------------------------------------------------------

alter table posts enable row level security;

-- ---------------------------------------------------------------------------
-- Policies
-- ---------------------------------------------------------------------------

create policy "Users can insert their own posts" on posts
  for insert with check (auth.uid() = user_id);

create policy "Users can view all posts" on posts
  for select using (true);

create policy "Users can update their own posts" on posts
  for update using (auth.uid() = user_id);

create policy "Users can delete their own posts" on posts
  for delete using (auth.uid() = user_id);

-- ---------------------------------------------------------------------------
-- Indexes
-- ---------------------------------------------------------------------------

create index if not exists posts_user_id_idx on posts(user_id);

-- ---------------------------------------------------------------------------
-- Trigger function to update updated_at timestamp before update
-- ---------------------------------------------------------------------------

create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

create trigger update_posts_updated_at
  before update on posts
  for each row execute function update_updated_at_column();
